<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cuiot.dmp.externalapi.service.mapper.gw.entranceguard.GwEntranceGuardAccessRecordMapper">
  <resultMap id="BaseResultMap" type="cn.cuiot.dmp.externalapi.service.entity.gw.entranceguard.GwEntranceGuardAccessRecordEntity">
    <!--@mbg.generated-->
    <!--@Table tb_gw_entrance_guard_access_record-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sn" jdbcType="VARCHAR" property="sn" />
    <result column="scan_tpye" jdbcType="INTEGER" property="scanTpye" />
    <result column="in_out" jdbcType="INTEGER" property="inOut" />
    <result column="is_open_door" jdbcType="INTEGER" property="isOpenDoor" />
    <result column="snap_time" jdbcType="TIMESTAMP" property="snapTime" />
    <result column="image_type" jdbcType="INTEGER" property="imageType" />
    <result column="image" jdbcType="LONGVARCHAR" property="image" />
    <result column="temperature" jdbcType="DOUBLE" property="temperature" />
    <result column="highest_thermal_threshold" jdbcType="DOUBLE" property="highestThermalThreshold" />
    <result column="lowest_thermal_threshold" jdbcType="DOUBLE" property="lowestThermalThreshold" />
    <result column="temperature_type" jdbcType="INTEGER" property="temperatureType" />
    <result column="qr_code" jdbcType="LONGVARCHAR" property="qrCode" />
    <result column="vaccine" jdbcType="LONGVARCHAR" property="vaccine" />
    <result column="nucleic" jdbcType="LONGVARCHAR" property="nucleic" />
    <result column="journey" jdbcType="LONGVARCHAR" property="journey" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user" jdbcType="BIGINT" property="updateUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="BIGINT" property="createUser" />
    <result column="deleted" jdbcType="BOOLEAN" property="deleted" />
    <result column="name" jdbcType="BOOLEAN" property="name" />
    <result column="person_id" jdbcType="BIGINT" property="personId" />
    <result column="entrance_guard_id" jdbcType="BIGINT" property="entranceGuardId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, sn, scan_tpye, in_out, is_open_door, snap_time, image_type, image, temperature,
    highest_thermal_threshold, lowest_thermal_threshold, temperature_type, qr_code, vaccine, 
    nucleic, journey, update_time, update_user, create_time, create_user, deleted, `name`, person_id, entrance_guard_id
  </sql>

    <select id="queryForPage" resultType="cn.cuiot.dmp.externalapi.service.vo.gw.entranceguard.GwEntranceGuardAccessRecordVO"
            parameterType="cn.cuiot.dmp.externalapi.service.query.gw.entranceguard.GwEntranceGuardAccessRecordQuery">
        SELECT
            b.company_id companyId,
            b.dept_id deptId,
            b.building_id buildingId,
            b.`name` personName,
            b.phone,
            b.person_group_id personGroupId,
            a.image,
            a.sn,
            a.in_out `inOut`,
            a.is_open_door isOpenDoor,
            a.scan_tpye scanTpye,
            a.snap_time snapTime,
            a.entrance_guard_id,
            c.name entranceGuardName
        FROM
            tb_gw_entrance_guard_access_record a
                LEFT JOIN tb_gw_entrance_guard_person b ON a.person_id = b.id
                LEFT JOIN tb_gw_entrance_guard c ON a.entrance_guard_id = c.id
        WHERE
            a.deleted = 0
            AND b.deleted = 0
            AND b.company_id = #{query.companyId}
        <if test="query.building != null">
            AND b.building_id = #{query.building}
        </if>
        <if test="query.sn != null and query.sn != ''">
            AND a.sn = #{query.sn}
        </if>
        <if test="query.personName != null and query.personName != ''">
            AND b.name = #{query.personName}
        </if>
        <if test="query.snapBeginTime != null and query.snapEndTime != null">
            AND (a.snap_time <![CDATA[ >= ]]> #{query.snapBeginTime} AND a.snap_time <![CDATA[ <= ]]> #{query.snapEndTime})
        </if>
        GROUP BY
            a.create_time DESC
    </select>
</mapper>