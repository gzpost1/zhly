<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.cuiot.dmp.system.infrastructure.persistence.dao.SpaceDao">


    <sql id="system_has_child">
        CASE
                WHEN ( (SELECT 1 FROM department d1 WHERE parent_id = d0.id LIMIT 1) IS NOT NULL
                or (
                (SELECT
                    1
                FROM
                    department d2 left join organization o on o.id = d2.pk_org_id
                WHERE
                    ( d2.parent_id IS NULL AND d2.path LIKE concat(d0.path, '%') )
                    AND d2.d_group = '2'
                    AND o.org_type_id = '12' limit 1)  ) is not null
        )
            THEN '1' ELSE '0' END AS has_child
    </sql>

    <select id="getRootDepartmentLazy" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyResDto">
        SELECT
            id,
            d_group,
            department_name,
            parent_id,
            pk_org_id,
            level,
            path,
            CASE WHEN
                     (
                         SELECT
                             1
                         FROM
                             department d1
                         WHERE
                                 pk_org_id = #{orgId}
                           AND
                                 parent_id = d0.id
                            and d_group in (1,2,3)
                        LIMIT 1
                         )
        IS NOT NULL OR
        (
        SELECT
        1
        FROM
        user_grant
        WHERE
        to_org_id  = #{orgId}
              AND
                to_dept_id = d0.id
                LIMIT 1
                )
                IS NOT NULL
                THEN
                '1'
                ELSE
                '0'
        END
        AS has_child
        FROM
        department d0
        WHERE
        d0.id = #{id}
    </select>

    <select id="getUserDepartmentLazy" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyResDto">
        SELECT
            id,
            d_group,
            department_name,
            parent_id,
            pk_org_id,
            level,
            path,
            CASE
                WHEN ( SELECT 1 FROM department d1 WHERE parent_id = d0.id and d1.d_group in (1,2) LIMIT 1) IS NOT NULL
                THEN '1' ELSE '0' END AS has_child
            FROM
            department d0
        WHERE
            d0.d_group in
        <foreach collection="dGroupList" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
            and d0.parent_id = #{parentId}
    </select>

    <select id="getDepartmentByNameAndPathAndDepartmentGroup" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyByNameResDto">
        SELECT
            d0.id,
            d0.d_group,
            d0.department_name,
            d0.parent_id,
            d0.pk_org_id,
            d0.level,
            d0.path,
        CASE
            WHEN ( SELECT 1 FROM department d1 WHERE parent_id = d0.id LIMIT 1 ) IS NOT NULL THEN
            '1' ELSE '0'
            END AS has_child
        FROM
            department d0
        WHERE
            d0.d_group IN
            <foreach collection="dGroupList" item="item" separator="," open="(" close=")">
            #{item}
            </foreach>
            AND d0.path LIKE CONCAT(#{path}, '%')
            AND d0.department_name LIKE CONCAT('%',#{departmentName}, '%')
    </select>

    <select id="getChildDepartmentListByParentId" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyByNameResDto">
        SELECT
            d0.id,
            d0.d_group,
            d0.department_name,
            d0.parent_id,
            d0.pk_org_id,
            d0.level,
            d0.path,
            CASE

                WHEN ( SELECT 1 FROM department d1 WHERE parent_id = d0.id LIMIT 1 ) IS NOT NULL THEN
		'1' ELSE '0'
        END AS has_child
        FROM
	        department d0
        WHERE
	        d0.parent_id = #{parentId}
    </select>

    <select id="getParentDepartmentByParentId" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyByNameResDto">
        SELECT
            d0.id,
            d0.d_group,
            d0.department_name,
            d0.parent_id,
            d0.pk_org_id,
            d0.level,
            d0.path,
            CASE

                WHEN ( SELECT 1 FROM department d1 WHERE parent_id = d0.id LIMIT 1 ) IS NOT NULL THEN
		'1' ELSE '0'
        END AS has_child
        FROM
	        department d0
        WHERE
	        d0.parent_id in (
            select
                parent_id
            from
                department
            where
                id = #{parentId}
            )
    </select>


    <select id="getDeptListByPathAndGroupFloor"
            resultType="cn.cuiot.dmp.base.infrastructure.dto.DepartmentDto">
        SELECT
            d.id,
            d_group,
            department_name name,
            parent_id,
            pk_org_id org_id,
            code,
            path,
            description,
            sort,
            created_on,
            created_by
        FROM department d LEFT JOIN org_label ol on d.pk_org_id = ol.org_id
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="path != null and path !='' ">
                AND path like concat('%', #{path}, '%')
            </if>
            <if test="floorName != null and floorName !='' ">
                AND department_name like concat('%', #{floorName}, '%')
            </if>
            <if test="labelId != null">
                AND ol.label_id = #{labelId}
            </if>
            and d_group = #{group}
        </trim>
        order by created_on desc,id desc
    </select>

    <select id="getUserDepartmentLazyChange" resultType="cn.cuiot.dmp.system.infrastructure.entity.dto.GetDepartmentTreeLazyResDto">
      SELECT
        id,
        d_group,
        department_name,
        parent_id,
        pk_org_id,
        level,
        path,
        CASE
        WHEN ( SELECT 1 FROM department d1 WHERE parent_id = d0.id AND ( d1.d_group = 3  or d1.d_group = 1 or d1.d_group =2)  LIMIT 1 ) IS NOT NULL
        THEN '1' ELSE '0' END AS has_child
      FROM
        department d0
      WHERE
        d0.d_group in
        <foreach collection="dGroupList" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
      and d0.parent_id = #{parentId}
    </select>

    <select id="getMaxUnitByPath" resultType="java.lang.Integer">
       select
              MAX(
                    (
                        case property_key
                        when 'unit_num' then val
                        else''
                        end
                    )
                ) unit_num
        from
        	department_property dp
        	left join department d on dp.dept_id = d.id
        where
        	d.`path` = #{path}
    </select>

</mapper>